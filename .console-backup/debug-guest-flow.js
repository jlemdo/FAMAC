/**
 * üîç SCRIPT DE AN√ÅLISIS DEL FLUJO GUEST
 * Analiza el c√≥digo Guest para identificar posibles puntos de congelamiento
 */

const fs = require('fs');
const path = require('path');

// Leer el archivo AddressFormUberStyle.jsx
const filePath = path.join(__dirname, 'src', 'address', 'AddressFormUberStyle.jsx');
const fileContent = fs.readFileSync(filePath, 'utf8');

console.log('üîç ANALIZANDO FLUJO GUEST EN AddressFormUberStyle.jsx...\n');

// Extraer la secci√≥n de Guest
const guestSectionMatch = fileContent.match(/\/\/ Si viene de GuestCheckout[\s\S]*?}, 0\); \/\/ Cierre del setTimeout de iOS fix/);

if (!guestSectionMatch) {
  console.log('‚ùå ERROR: No se encontr√≥ la secci√≥n de Guest');
  process.exit(1);
}

const guestSection = guestSectionMatch[0];
const lines = guestSection.split('\n');

console.log('üìä AN√ÅLISIS DEL FLUJO GUEST:');
console.log('===============================================\n');

// Analizar l√≠nea por l√≠nea
let currentStep = 1;
let inNavigationBlock = false;
let operationCount = 0;
let potentialProblems = [];

lines.forEach((line, index) => {
  const trimmedLine = line.trim();
  
  // Detectar operaciones complejas
  if (trimmedLine.includes('navigation.navigate')) {
    console.log(`üö® PUNTO CR√çTICO ${currentStep}: NAVIGATION.NAVIGATE (l√≠nea ${index + 1})`);
    console.log(`   C√≥digo: ${trimmedLine}`);
    inNavigationBlock = true;
    potentialProblems.push({
      step: currentStep,
      type: 'NAVIGATION',
      line: index + 1,
      code: trimmedLine,
      risk: 'ALTO'
    });
    currentStep++;
  }
  
  // Detectar construcci√≥n de objetos complejos
  if (trimmedLine.includes('guestData:') || trimmedLine.includes('params:')) {
    console.log(`‚ö†Ô∏è  OPERACI√ìN COMPLEJA ${currentStep}: CONSTRUCCI√ìN DE OBJETO (l√≠nea ${index + 1})`);
    console.log(`   C√≥digo: ${trimmedLine}`);
    operationCount++;
    if (operationCount > 5) {
      potentialProblems.push({
        step: currentStep,
        type: 'OBJECT_CONSTRUCTION',
        line: index + 1,
        code: trimmedLine,
        risk: 'MEDIO'
      });
    }
    currentStep++;
  }
  
  // Detectar validaciones s√≠ncronas
  if (trimmedLine.includes('if (') && !trimmedLine.includes('console.log')) {
    console.log(`üîç VALIDACI√ìN ${currentStep}: ${trimmedLine} (l√≠nea ${index + 1})`);
    currentStep++;
  }
  
  // Detectar transformaciones de datos
  if (trimmedLine.includes('toISOString()') || trimmedLine.includes('preservedDeliveryInfo =')) {
    console.log(`üîÑ TRANSFORMACI√ìN ${currentStep}: ${trimmedLine} (l√≠nea ${index + 1})`);
    potentialProblems.push({
      step: currentStep,
      type: 'DATA_TRANSFORMATION',
      line: index + 1,
      code: trimmedLine,
      risk: 'BAJO'
    });
    currentStep++;
  }
});

console.log('\nüìã RESUMEN DEL AN√ÅLISIS:');
console.log('===============================================');
console.log(`Total de operaciones detectadas: ${currentStep - 1}`);
console.log(`Operaciones complejas de objeto: ${operationCount}`);
console.log(`Puntos cr√≠ticos identificados: ${potentialProblems.length}`);

console.log('\nüö® PUNTOS DE RIESGO ALTO/MEDIO:');
potentialProblems.forEach(problem => {
  if (problem.risk === 'ALTO' || problem.risk === 'MEDIO') {
    console.log(`${problem.risk === 'ALTO' ? 'üî¥' : 'üü°'} ${problem.type} (l√≠nea ${problem.line})`);
    console.log(`   C√≥digo: ${problem.code.substring(0, 80)}...`);
  }
});

console.log('\nüí° HIP√ìTESIS DEL PROBLEMA:');
console.log('===============================================');

// Buscar patr√≥n espec√≠fico que podr√≠a causar el problema
if (fileContent.includes('navigation.navigate(\'MainTabs\'')) {
  console.log('üéØ PROBABLE CAUSA: navigation.navigate con par√°metros complejos');
  console.log('   - Guest construye objetos MUCHO m√°s complejos que usuarios normales');
  console.log('   - React Navigation podr√≠a estar serializando/deserializando objetos grandes');
  console.log('   - iOS es m√°s sensible a par√°metros de navegaci√≥n complejos');
}

if (guestSection.includes('preservedDeliveryInfo') && guestSection.includes('toISOString()')) {
  console.log('üéØ POSIBLE CAUSA: Transformaci√≥n de fechas Date -> String');
  console.log('   - iOS podr√≠a estar bloqueando durante Date.toISOString()');
  console.log('   - Especialmente si hay m√∫ltiples objetos Date');
}

console.log('\nüîß PR√ìXIMOS PASOS SUGERIDOS:');
console.log('1. Simplificar par√°metros de navegaci√≥n Guest');
console.log('2. Pre-procesar todas las fechas ANTES del setTimeout');
console.log('3. Dividir navigation.navigate en pasos m√°s peque√±os');
console.log('4. Usar AsyncStorage temporal en lugar de par√°metros complejos');