require 'xcodeproj'

platform :ios, '16.0'
use_frameworks! :linkage => :static
source 'https://cdn.cocoapods.org/'

require_relative '../node_modules/react-native/scripts/react_native_pods'
prepare_react_native_project!

target 'MyNewApp' do
  config = use_native_modules!

  pod 'react-native-maps',
    path: '../node_modules/react-native-maps'

  use_react_native!(
    path: config[:reactNativePath],
    app_path: "#{Pod::Config.instance.installation_root}/..",
    new_arch_enabled: true,
    fabric_enabled: true
  )

  post_install do |installer|
    react_native_post_install(installer, config[:reactNativePath], mac_catalyst_enabled: false)

    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
        cfg.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        cfg.build_settings['ENABLE_BITCODE'] = 'NO'
      end
    end

    # RUTA del proyecto de la app
    app_proj_path = File.join(installer.pods_project.path.dirname.dirname, 'MyNewApp.xcodeproj')
    app_proj = Xcodeproj::Project.open(app_proj_path)
    app_target = app_proj.targets.find { |t| t.name == 'MyNewApp' }

    # Desactivar Swift si lo estÃ¡s forzando
    app_target.build_configurations.each do |cfg|
      cfg.build_settings['SWIFT_EMIT_MODULE'] = 'NO'
      cfg.build_settings['SWIFT_COMPILATION_MODE'] = 'none'
    end

    # Asegura que no haya archivos Swift
    group = app_proj.main_group.find_subpath('MyNewApp', true)
    swift_ref = group&.files&.find { |f| f.path&.end_with?('.swift') }
    group.remove_reference(swift_ref) if swift_ref

    phase = app_target.source_build_phase
    phase.files.each do |bf|
      phase.remove_build_file(bf) if bf.file_ref&.path&.end_with?('.swift')
    end

    # Asegura que AppDelegate.m estÃ© en Compile Sources
    main_group = app_proj.main_group.find_subpath('MyNewApp', false)
    file_ref = main_group.find_file_by_path('AppDelegate.m') || main_group.new_file('MyNewApp/AppDelegate.m')
    unless phase.files_references.any? { |fr| fr.path == 'AppDelegate.m' }
      phase.add_file_reference(file_ref, true)
    end

    # âœ… Eliminar Embed Pods Frameworks de forma segura
    app_proj.targets.each do |target|
      target.build_phases.each do |phase|
        if phase.respond_to?(:name) && phase.name == '[CP] Embed Pods Frameworks'
          UI.message("ðŸš« Eliminando fase [CP] Embed Pods Frameworks del target #{target.name}")
          target.build_phases.delete(phase)
        end
      end
    end

    app_proj.save
  end
end
